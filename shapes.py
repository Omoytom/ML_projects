# -*- coding: utf-8 -*-
"""Shapes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zIVXBywq0gN7KxB30POnUUTxWKKuWCwL
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.utils import to_categorical
import matplotlib.pyplot as plt
import cv2
import random
from tensorflow.keras.preprocessing.image import ImageDataGenerator

num_classes = 4
num_samples = 1000
IMG_SIZE = 64

datagen = ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.1,
    height_shift_range=0.1,
    shear_range=0.2,
    zoom_range=0.2,
    fill_mode='nearest'
)

def generate_shape(shape, img_size):
    print(f"Generating shape: {shape}")
    img = np.zeros((img_size, img_size), dtype=np.uint8)
    if shape == "circle":
        print("Drawing a circle")
        cv2.circle(img, (img_size // 2, img_size // 2), img_size // 4, 255, -1)
    elif shape == "square":
        print("Drawing a square")
        side = img_size // 2
        start = (img_size - side) // 2
        cv2.rectangle(img, (start, start), (start + side, start + side), 255, -1)
    elif shape == "triangle":
        print("Drawing a triangle")
        pts = np.array([
            [img_size // 2, img_size // 4],
            [img_size // 4, 3 * img_size // 4],
            [3 * img_size // 4, 3 * img_size // 4]
        ], np.int32)
        cv2.fillPoly(img, [pts], 255)
    elif shape == "rectangle":
        print("Drawing a rectangle")
        width = img_size // 3
        height = img_size // 2
        start_x = (img_size - width) // 2
        start_y = (img_size - height) // 2
        cv2.rectangle(img, (start_x, start_y), (start_x + width, start_y + height), 255, -1)
    else:
        raise ValueError(f"Unknown shape: {shape}")
    return img

triangle_img = generate_shape("triangle", IMG_SIZE)
plt.imshow(triangle_img, cmap='gray')
plt.title("triangle")
plt.show()

def create_dataset(num_samples, img_size):
    data = []
    labels = []
    shapes = ["circle", "square", "triangle","rectangle"]
    for label, shape in enumerate(shapes):
        for _ in range(num_samples):
            img = generate_shape(shape, img_size)
            img = cv2.GaussianBlur(img, (5, 5), 0)
            img = img / 255.0
            data.append(img)
            labels.append(label)
    return np.array(data), np.array(labels)

X, y = create_dataset(num_samples, IMG_SIZE)
X = X.reshape(-1, IMG_SIZE, IMG_SIZE, 1) #(batch_size, height, width, channels)
y = to_categorical(y, num_classes)

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

train_generator = datagen.flow(X_train, y_train, batch_size=32)

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(IMG_SIZE, IMG_SIZE, 1)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(num_classes, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))

plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.legend()
plt.title('Loss')

plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.legend()
plt.title('Accuracy')
plt.show()

for i in range(9):
    idx = random.randint(0, len(X_test) - 1)
    img = X_test[idx].reshape(IMG_SIZE, IMG_SIZE)
    true_label = np.argmax(y_test[idx])
    predictions = model.predict(X_test[idx:idx+1])
    pred_label = np.argmax(predictions)

    plt.imshow(img, cmap='gray')
    shape_names = ["circle", "square", "triangle", "rectangle"]
    predicted_shape = shape_names[pred_label]
    plt.title(f"True: {true_label}, Pred: {predicted_shape}")
    plt.show()